<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ToolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>